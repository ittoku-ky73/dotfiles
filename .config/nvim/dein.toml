# File Tree
[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
  let NEADTreeShowHidden=1
  nnoremap <silent><C-a> :NERDTreeFind<CR>:vertical res 30<CR>
'''

# navigation bar
[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
  let g:airline_theme = 'molokai' 
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#tabline#fnamemod = ':t'
'''

# git diff
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set signcolumn=yes
  let g:gitgutter_async = 1
  highlight GitGutterAdd ctermfg=green
  highlight GitGutterChange ctermfg=yellow
  highlight GitGutterDelete ctermfg=red
  highlight GitGutterChangeDelete ctermfg=yellow
'''

# comment out
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  vnoremap ? :'<,'>TComment<CR>
'''

# colorscheme
[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
  colorscheme jellybeans
'''

# bracket syntax
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1
'''

# file icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# file search
[[plugins]]
repo = 'junegunn/fzf'
hook_post_update = './install --all'
merged = 0
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_add = '''
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always'.shellescape(<q-args>), 1, 
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \   : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)
  nnoremap <C-q> :Rg<Space>
  nnoremap <C-p> :GFiles<CR>
  nnoremap <C-h> :History<CR>
'''

# LSP(Language Server Protocol)
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
  inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<C-Tab>"
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1] =~# '\s'
  endfunction
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
'''

# autocomplete close (about def...end, if...end)
[[plugins]]
repo = 'tpope/vim-endwise'
